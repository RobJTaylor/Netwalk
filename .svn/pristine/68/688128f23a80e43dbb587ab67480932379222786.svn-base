package com.example.robta.netwalk;

import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.graphics.Canvas;
import android.view.View;

/**
 * Created by robta on 04/02/2017.
 */

public class GameView extends View{

    public GameView(Context context) {
        super(context);
    }

    private int canvasWidth;
    private int canvasHeight;

    @Override
    public void onDraw(Canvas canvas) {
        super.onDraw(canvas);

        //Get canvas dimensions
        canvasWidth = canvas.getWidth();
        canvasHeight = canvas.getHeight();

        //Get rows and columns
        int rowCount = Game.getGrid().getRows();
        int columnCount = Game.getGrid().getColumns();

        //Set current X and Y cell number
        int cellXNumber = 0;
        int cellYNumber = rowCount - 1;

        //Get total number of cells
        int totalCount = rowCount * columnCount;

        for (int i = 0; i < totalCount; i++) {
            //Temporary code before more bitmaps are created, simply a proof of concept
            //Store bitmap image in memory

            //Get cell width and height
            int cellWidth = canvas.getWidth() / columnCount;
            int cellHeight = canvas.getHeight() / rowCount;

            //Adjust cell Y value when looping
            if(cellXNumber == columnCount) {
                cellYNumber--;
                cellXNumber = 0;
            }


            Bitmap image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.appicon);
            Bitmap resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);

            int currentItem = Game.getGrid().getGridElem(cellXNumber,cellYNumber);

            switch (currentItem) {
                //Cases for straight lines
                case 17:
                    image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.redup);
                    resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);
                    break;
                case 10:
                    image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.redacross);
                    resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);
                    break;
                //Cases for L lines
                case 9:
                    image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.redlflip);
                    resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);
                    break;
                case 3:
                    image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.redl);
                    resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);
                    break;
                //Cases for T lines
                case 11:
                    image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.redt);
                    resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);
                    break;
                //Cases for servers
                case 16:
                    image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.server);
                    resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);
                    break;
                case 24:
                    image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.server);
                    resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);
                    break;
                case 90:
                    image = BitmapFactory.decodeResource(getContext().getResources(), R.drawable.server);
                    resizedImage = Bitmap.createScaledBitmap(image, cellWidth, cellHeight, false);
                    break;
            }

            //Calculate X and Y coordinates
            int positionX = cellXNumber * cellWidth;
            int positionY = cellYNumber * cellHeight;

            //Draw bitmap at calculated coordinates
            canvas.drawBitmap(resizedImage, positionX, positionY, null);

            cellXNumber++;
        }

    }

    public void redrawCanvas() {
        invalidate();
    }

    public int[] calculateTappedCell(int x, int y) {
        int cellWidth = canvasWidth / Game.getGrid().getColumns();
        int cellHeight = canvasHeight / Game.getGrid().getRows();
        int columns = Game.getGrid().getColumns();
        int rows = Game.getGrid().getRows();

        int tappedX = 0;
        int tappedY = 0;

        int currentColumn = 0;
        int lastColumn;

        int currentRow = 0;
        int lastRow;


        //Determine X cell
        for (int i = 0; i <= columns; i++) {
            currentColumn++;
            lastColumn = currentColumn - 1;

            int currentMax = currentColumn * cellWidth;
            int currentMin = lastColumn * cellWidth;

            if (x <= currentMax && x >= currentMin) {
                tappedX = i;
            }
        }

        //Determine Y cell
        for (int i = 0; i <= rows; i++) {
            currentRow++;
            lastRow = currentRow - 1;

            int currentMax = currentRow * cellHeight;
            int currentMin = lastRow * cellHeight;

            if (y <= currentMax && y >= currentMin) {
                tappedY = i - 1;
            }
        }

        int[] coordinates = new int[2];
        coordinates[0] = tappedX;
        coordinates[1] = tappedY;
        return coordinates;
    }

}

